#!/usr/bin/env python3
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
__author__ = "Thiago Lucio"
__license__ = "GPL"
__email__ = "systemofdown@gmail.com"

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GLib, GObject, Gio
import subprocess
from subprocess import Popen
import os
import getpass
user = getpass.getuser()
display = os.environ['DISPLAY']
user_data_dir = GLib.get_user_data_dir()
systemd_path = os.path.join(user_data_dir + '/systemd/user/')

systemd_timer_list = []
for timer in os.listdir(systemd_path):
    service = timer.split('.timer')[0] + ".service"
    if '.timer' in timer:
        # if unit.timer exist then unit.service must exist also.
        if os.path.exists(systemd_path + service):
            systemd_timer_list.append(timer)


def systemctl(action, unit):
    outputCMD = subprocess.Popen(['systemctl', '--user', action,
                                  unit], stdout=subprocess.PIPE)
    return outputCMD.stdout.readlines()


def check_string(unit, string):
    if unit.partition('.')[-1] == 'timer':
        unit = systemd_path + unit
        # convert to unit.timer
    else:
        unit = systemd_path + unit.partition('.')[0] + '.service'

    with open(unit, 'r', encoding="utf-8") as f:
        for i in f.readlines():
            if string in i:
                return True
    return False


def parse_file(unit, string):
    if unit.partition('.')[-1] == 'timer':
        unit = systemd_path + unit
        # convert to unit.timer
    else:
        unit = systemd_path + unit.partition('.')[0] + '.service'

    with open(unit, 'r', encoding="utf-8") as f:
        for i in f.readlines():
            if string in i:
                print(i.partition(string + '=')[-1], 'a9a9a9a9a9a', i)
                return i.partition(string + '=')[-1].rstrip()


def systemd_files(systemd_list):
    for unit in systemd_timer_list:

        filename = str(unit.partition('.timer')[0])
        isactive = str(systemctl('is-active', unit.partition(".")[0])[0]
                       ).partition("b'")[2].partition("\\")[0]
        description = str(parse_file(unit, 'Description')).rstrip()
        time = str(parse_file(unit, 'OnCalendar')).rstrip()
        time_mode = "Calendar"
        if check_string(unit, 'OnUnitActiveSec'):
            time = str(parse_file(unit, 'OnUnitActiveSec')).rstrip()
            time_mode = "Restart"
        execstart = str(parse_file(unit.partition('.')[0] + '.service', 'ExecStart')).rstrip()

        systemd_list.append((filename, isactive, description, time, execstart, time_mode))
        print(parse_file(unit, 'Description'), 'eae', unit)

    return systemd_list


def systemd_new_file(systemd_list, unit):
    filename = str(unit.partition('.timer')[0])
    isactive = str(systemctl('is-active', unit.partition(".")[0])[0]
                   ).partition("b'")[2].partition("\\")[0]
    description = str(parse_file(unit, 'Description')).rstrip()
    time = str(parse_file(unit, 'OnCalendar')).rstrip()
    time_mode = "Calendar"
    if check_string(unit, 'OnUnitActiveSec'):
        time = str(parse_file(unit, 'OnUnitActiveSec')).rstrip()
        time_mode = "Restart"
    execstart = str(parse_file(unit.partition('.')[0] + '.service', 'ExecStart')).rstrip()

    systemd_list.append((filename, isactive, description, time, execstart, time_mode))
    print(parse_file(unit, 'Description'), 'eae', unit)

    return systemd_list


def systemd_save(content, service, timer):
    timer_file = os.path.join(systemd_path + "{0}.timer".format(timer))
    service_file = os.path.join(systemd_path + "{0}.service".format(service))
    with open(timer_file, 'w') as f:
        f.write(content[1])
        f.close()
    with open(service_file, 'w') as f:
        f.write(content[0])
        f.close()


def systemd_timer(description_time, description_service, display,
                  service_type, execstart, time):
    service = """
    [Unit]
    Description={0}

    [Service]
    Type={1}
    Environment="DISPLAY={2}" "XAUTHORITY=/home/{3}/.Xauthority"
    ExecStart={4}
    [Install]
    WantedBy=default.target  """.format(description_service, service_type,
                                        display, user, execstart)

    timer = """
    [Unit]
    Description={0}

    [Timer]
    Persistent=true
    OnBootSec=1s
    {1}
    [Install]
    WantedBy=default.target""".format(description_time, time)
    return service, timer


class Assistant(Gtk.Assistant):

    def __init__(self):
        Gtk.Assistant.__init__(self)
        self.set_title("Assistant")
        self.set_default_size(570, 50)
        self.connect("cancel", self.on_cancel_clicked)
        self.connect("close", self.on_close_clicked)
        self.connect("apply", self.on_apply_clicked)

        if win.edit_mode == True:
            # unit.timer unit.service from selected row in Assistant
            self.unit_timer = win.unit_timer_record
            self.unit_service = win.unit_service_record

        # timer Page
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.append_page(box)
        self.set_page_type(box, Gtk.AssistantPageType.INTRO)
        self.set_page_title(box, "Timer")
        self.time_mode_entry = Gtk.Entry()
        self.description_timer = Gtk.Entry()
        time_mode_entry_string = "calendar"
        if win.edit_mode == True:
            if check_string(self.unit_timer, "OnCalendar"):
                time_mode_entry_string = "calendar"
            if check_string(self.unit_timer, "OnUnitActiveSec"):
                time_mode_entry_string = "restart"
        self.time_mode_entry.set_text(time_mode_entry_string)

        desc = "Description"
        if win.edit_mode == True:
            desc = parse_file(self.unit_timer, "Description")

        self.description_timer.set_text(desc)
        self.filename = Gtk.Entry()

        filename = 'filename'
        if win.edit_mode == True:
            filename = self.unit_timer.split(".timer")[0]
        self.filename.set_text(filename)

        label = Gtk.Label(label="filename: <foobar> will result foobar.timer\n"
                          "Restart mode: <restart>, will restart the service every X time\n"
                          "Calendar mode: <calendar> default mode\n"
                          "Description: description for foobar.timer")
        label.set_line_wrap(True)
        box.pack_start(label, True, True, 0)
        box.pack_start(self.time_mode_entry, True, True, 0)
        box.pack_start(self.description_timer, True, True, 0)
        box.pack_start(self.filename, True, True, 0)
        self.set_page_complete(box, True)

        # calendar page
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.append_page(box)
        self.set_page_type(box, Gtk.AssistantPageType.CONTENT)
        self.set_page_title(box, "Date & Time")
        self.time = Gtk.Entry()
        calendar = "*-*-* *:00:05"

        if win.edit_mode == True:
            if check_string(self.unit_timer, "OnCalendar"):
                calendar = parse_file(self.unit_timer, "OnCalendar")
            if check_string(self.unit_timer, "OnUnitActiveSec"):
                calendar = parse_file(self.unit_timer, "OnUnitActiveSec")

        self.time.set_text(calendar)
        label_timespan = Gtk.Label()
        label_timespan.set_markup("Timespan for calendar mode:\n"
                                  "DayOfWeek Year-Month-Day Hour:Minute:Second\n"
                                  "'*-*-* *:*:00 = minutes'\n"
                                  "'*-*-* *:00:00 = hours'\n"
                                  "'*-*-* 00:00:00 = days'\n"
                                  "'minutely', 'hourly', 'daily', 'monthly', 'weekly'\n\n"
                                  "Time span for restart mode:\n"
                                  "2 h 2hours 48hr 1y 12month 55s500ms 300ms20s 5day\n\n"
                                  "visit <a href=\"https://www.freedesktop.org/software/systemd/man/systemd.time.html\" "
                                  "title=\"Click to find out more\">freedesktop</a> for more help.")
        label_timespan.set_line_wrap(True)
        box.pack_start(label_timespan, True, True, 0)
        box.pack_start(self.time, True, True, 0)
        self.set_page_complete(box, True)

        # Service page
        self.complete = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.append_page(self.complete)
        self.set_page_type(self.complete, Gtk.AssistantPageType.CONFIRM)
        self.set_page_title(self.complete, "Service")

        # unit.service description
        self.description_Service = Gtk.Entry()
        Service_description = "Description"
        if win.edit_mode == True:
            Service_description = parse_file(self.unit_service, 'Description')

        self.description_Service.set_text(Service_description)

        # unit.service Service

        self.Service = Gtk.Entry()
        Service = '/usr/bin/notify-send "Hello!"'
        if win.edit_mode == True:
            Service = parse_file(self.unit_service, 'ExecStart')

        print(Service)
        self.Service.set_text(Service)
        label_service = Gtk.Label()
        label_service.set_markup(
            'Service Type: simple, notify, oneshot\n'
            'For more information about Service Type visit: '
            '<a href=\"https://www.freedesktop.org/software/systemd/man/systemd.service.html\"\n'
            'title=\"Click to find out more\">freedesktop</a>.\n'
            'Service: use full path, Example: /usr/bin/notify-send "Hello!"\n'
            'Description: Service Description')

        label_service.set_line_wrap(True)
        self.service_type = Gtk.Entry()
        self.service_type.set_text("simple")
        self.complete.pack_start(label_service, True, True, 0)
        self.complete.pack_start(self.service_type, True, True, 0)
        self.complete.pack_start(self.Service, True, True, 0)
        self.complete.pack_start(self.description_Service, True, True, 0)
        self.set_page_complete(self.complete, True)

        # summary page
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.append_page(box)
        self.set_page_type(box, Gtk.AssistantPageType.SUMMARY)
        self.set_page_title(box, "Summary")
        self.label = Gtk.Label(label="")
        label.set_line_wrap(True)
        box.pack_start(self.label, True, True, 0)
        self.set_page_complete(box, True)

    def on_apply_clicked(self, *args):
        description_timer = self.description_timer.get_text()
        description_service = self.description_Service.get_text()
        execstart = self.Service.get_text()
        service_type = self.service_type.get_text()
        service_filename = self.filename.get_text() + '.service'
        timer_filename = self.filename.get_text() + '.timer'
        time_mode = self.time_mode_entry.get_text()
        time = "OnCalendar=" + self.time.get_text()
        if time_mode == "restart":
            time = "OnUnitActiveSec=" + self.time.get_text()

        content = systemd_timer(description_timer,
                                description_service,
                                display,
                                service_type,
                                execstart,
                                time)
        self.label.set_text(systemd_path + '\n'
                            + service_filename
                            + content[0] + '\n'
                            + timer_filename
                            + content[1])
        systemd_save(content,
                     self.filename.get_text(),
                     self.filename.get_text())
        systemd_list = []

        # add new row
        win.systemd_liststore.append(
            systemd_new_file(systemd_list, timer_filename)[0])

    def on_close_clicked(self, *args):
        Gtk.Assistant.hide_on_delete(self)

    def on_cancel_clicked(self, *args):
        # the row selected is deleted because after apply it will create another row
        # then in case the user cancel the dialog it will restore the row again
        if win.edit_mode == True:
            systemd_list = []
            win.systemd_liststore.append(
                systemd_new_file(systemd_list, self.unit_timer)[0])
        Gtk.Assistant.hide_on_delete(self)


class TreeViewFilterWindow(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title="GNOME Timer")
        self.set_border_width(10)
        self.set_default_size(1200, 50)
        # Setting up the self.grid in which the elements are to be positionned
        self.grid = Gtk.Grid()
        self.grid.set_column_homogeneous(True)
        self.grid.set_row_homogeneous(True)
        self.add(self.grid)

        # Creating the ListStore model
        self.systemd_liststore = Gtk.ListStore(str, str, str, str, str, str)
        systemd_list = []
        for list_ref in systemd_files(systemd_list):
            self.systemd_liststore.append(list(list_ref))
        self.current_filter_language = None

        # Creating the filter, feeding it with the liststore model
        self.language_filter = self.systemd_liststore.filter_new()
        # setting the filter function, note that we're not using the
        self.language_filter.set_visible_func(self.language_filter_func)

        # creating the treeview, making it use the filter as a model, and adding the columns
        self.treeview = Gtk.TreeView.new_with_model(self.language_filter)
        self.select = self.treeview.get_selection()
        self.select.connect("changed", self.on_tree_selection_changed)

        for i, column_title in enumerate(["Timer",
                                          "Status",
                                          "Description",
                                          "Date & Time",
                                          "Service",
                                          "Mode"]):
            renderer = Gtk.CellRendererText()
            column = Gtk.TreeViewColumn(column_title, renderer, text=i)
            self.treeview.append_column(column)
            self.buttons = list()
        for label in ["New",
                      "Start",
                      "Stop",
                      "Enable",
                      "Disable",
                      "Edit",
                      "Remove",
                      "Help"]:
            button = Gtk.Button()
            button.set_label(label)
            #image = Gtk.Image.new_from_icon_name("media-playback-start", Gtk.IconSize.BUTTON)
            # button.add(image)
            button.set_always_show_image(True)
            self.buttons.append(button)
            button.connect("clicked", self.on_selection_button_clicked)
        # setting up the layout, putting the treeview in a scrollwindow, and the buttons in a row
        self.scrollable_treelist = Gtk.ScrolledWindow()
        self.scrollable_treelist.set_vexpand(True)
        self.grid.attach(self.scrollable_treelist, 0, 0, 8, 10)
        self.grid.attach_next_to(
            self.buttons[0], self.scrollable_treelist, Gtk.PositionType.BOTTOM, 1, 1)
        for i, button in enumerate(self.buttons[1:]):
            self.grid.attach_next_to(button, self.buttons[i], Gtk.PositionType.RIGHT, 1, 1)
        self.scrollable_treelist.add(self.treeview)

        self.show_all()

    def on_tree_selection_changed(self, selection):
        self.model, self.treeiter = selection.get_selected()
        path = self.model.get_path(self.treeiter)
        if self.treeiter != None:
            self.selected = self.model[self.treeiter][0]

    def language_filter_func(self, model, iter, data):
        """Tests if the language in the row is the one in the filter"""
        if self.current_filter_language is None or self.current_filter_language == "None":
            return True
        else:
            return model[iter][2] == self.current_filter_language

    def on_selection_button_clicked(self, widget):
        button = widget.get_label()
        if button == "New":
            self.edit_mode = False
            assistant = Assistant()
            assistant.show_all()

        if button == "Stop":
            systemctl('stop', self.selected)
            systemctl('stop', self.selected + ".timer")
            status = str(systemctl('is-active', self.selected + ".timer")
                         [0]).partition("b'")[2].partition("\\")[0]
            model, treeiter = self.treeview.get_selection().get_selected()
            if treeiter != None:
                model[treeiter][1] = status

        if button == "Start":
            print(self.selected, 'hahahahahahaha')
            Popen(['systemctl', '--user', 'daemon-reload'])
            systemctl('start', self.selected)
            systemctl('start', self.selected + ".timer")
            status = str(systemctl('is-active', self.selected + ".timer")
                         [0]).partition("b'")[2].partition("\\")[0]
            model, treeiter = self.treeview.get_selection().get_selected()
            if treeiter != None:
                model[treeiter][1] = status

        if button == "Enable":
            systemctl('enable', self.selected)

        if button == "Disable":
            systemctl('disable', self.selected)

        if button == "Edit":
            self.edit_mode = True
            # record last selection
            self.unit_timer_record = self.selected + '.timer'
            self.unit_service_record = self.selected + '.service'
            # remove selected row
            if self.treeiter != None:
                path = self.model.get_path(self.treeiter)
                self.systemd_liststore.remove(self.systemd_liststore[path].iter)
            assistant = Assistant()
            assistant.show_all()
            systemctl('daemon-reload', self.selected)

            # Popen(['xdg-open', os.path.join(systemd_path, self.selected + ".timer")])

        if button == "Remove":
            os.remove(os.path.join(systemd_path, self.selected + ".service"))
            os.remove(os.path.join(systemd_path, self.selected + ".timer"))
            systemctl('disable', self.selected + ".timer")
            if self.treeiter != None:
                path = self.model.get_path(self.treeiter)
                # liststore starts with 1 and path list with 0

                row_path = path.get_indices()[0] + 1
                self.systemd_liststore.remove(self.systemd_liststore[path].iter)


win = TreeViewFilterWindow()
win.connect("delete-event", Gtk.main_quit)
win.show_all()
Gtk.main()
